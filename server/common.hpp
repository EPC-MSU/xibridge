#ifndef URPC_DEVXINET_COMMON_HPP
#define URPC_DEVXINET_COMMON_HPP

#include <chrono>
#include <cstdint>
#include <cstring>
#include <cstddef>

#include "bindy/bindy-static.h"

#ifndef conn_id_invalid
  #define conn_id_invalid 0
  typedef uint32_t conn_id_t;
#endif

#define URPC_XINET_PROTOCOL_VERSION 0x00000002
#define XIBRIDGE_XINET_PROTOCOL_VERSION 0x00000003

enum urpc_packet_type_t {
    URPC_OPEN_DEVICE_REQUEST_PACKET_TYPE = 0x00000001,
    URPC_OPEN_DEVICE_RESPONSE_PACKET_TYPE = 0x000000FF,
    URPC_CLOSE_DEVICE_REQUEST_PACKET_TYPE = 0x00000002,
    URPC_CLOSE_DEVICE_RESPONSE_PACKET_TYPE = 0x000000FE,
    URPC_COMMAND_REQUEST_PACKET_TYPE = 0x00000003,
    URPC_COMMAND_RESPONSE_PACKET_TYPE = 0x000000FD,
    URPC_ERROR_PACKET_TYPE = 0x00000004,
};

enum xibridge_packet_type_t {
    XIBRIDGE_OPEN_DEVICE_REQUEST_PACKET_TYPE = 0x00000001,
    XIBRIDGE_OPEN_DEVICE_RESPONSE_PACKET_TYPE = 0x000000FF,
    XIBRIDGE_CLOSE_DEVICE_REQUEST_PACKET_TYPE = 0x00000002,
    XIBRIDGE_CLOSE_DEVICE_RESPONSE_PACKET_TYPE = 0x000000FE,
    XIBRIDGE_COMMAND_REQUEST_PACKET_TYPE = 0x00000003,
    XIBRIDGE_COMMAND_RESPONSE_PACKET_TYPE = 0x000000FD,
    XIBRIDGE_ERROR_PACKET_TYPE = 0x00000004,
    XIBRIDGE_VERSION_REQUEST_PACKET_TYPE = 0x00000005,
    XIBRIDGE_VERSION_RESPONSE_PACKET_TYPE = 0x0000000FB
};


size_t adaptive_wait_send(bindy::Bindy* bindy, conn_id_t conn_id, std::vector<uint8_t> data, size_t timeout_ms);


#endif //URPC_DEVXINET_COMMON_HPP
